DnsClient	ndns.html#DnsClient	ndns: DnsClient	
UnexpectedDisconnectionError	ndns.html#UnexpectedDisconnectionError	ndns: UnexpectedDisconnectionError	
ResponseIpNotEqualError	ndns.html#ResponseIpNotEqualError	ndns: ResponseIpNotEqualError	
ResponsePortNotEqualError	ndns.html#ResponsePortNotEqualError	ndns: ResponsePortNotEqualError	
ResponseIdNotEqualError	ndns.html#ResponseIdNotEqualError	ndns: ResponseIdNotEqualError	
IsNotAnResponseError	ndns.html#IsNotAnResponseError	ndns: IsNotAnResponseError	
OpCodeNotEqualError	ndns.html#OpCodeNotEqualError	ndns: OpCodeNotEqualError	
ndnsDnsServerIp	ndns.html#ndnsDnsServerIp	ndns: ndnsDnsServerIp	
initDnsClient	ndns.html#initDnsClient,string,Port	ndns: initDnsClient(ip: string = ndnsDnsServerIp; port: Port = Port(53)): DnsClient	
initSystemDnsClient	ndns.html#initSystemDnsClient	ndns: initSystemDnsClient(): DnsClient	
getIp	ndns.html#getIp,DnsClient	ndns: getIp(client: DnsClient): string	
getPort	ndns.html#getPort,DnsClient	ndns: getPort(client: DnsClient): Port	
dnsTcpQuery	ndns.html#dnsTcpQuery,DnsClient,Message,int	ndns: dnsTcpQuery(client: DnsClient; msg: Message; timeout: int = -1): Message	
dnsQuery	ndns.html#dnsQuery,DnsClient,Message,int	ndns: dnsQuery(client: DnsClient; msg: Message; timeout: int = -1; retransmit = false): Message	
dnsAsyncTcpQuery	ndns.html#dnsAsyncTcpQuery,DnsClient,Message,int	ndns: dnsAsyncTcpQuery(client: DnsClient; msg: Message; timeout: int = 500): owned(\n    Future[Message])	
dnsAsyncQuery	ndns.html#dnsAsyncQuery,DnsClient,Message,int	ndns: dnsAsyncQuery(client: DnsClient; msg: Message; timeout: int = 500;\n              retransmit = false): owned(Future[Message])	
prepareRDns	ndns.html#prepareRDns,string	ndns: prepareRDns(ip: string): string	
prepareDnsBL	ndns.html#prepareDnsBL,string,string	ndns: prepareDnsBL(ip, dnsbl: string): string	
randId	ndns.html#randId	ndns: randId(): uint16	
resolveIpv4	ndns.html#resolveIpv4,DnsClient,string,int	ndns: resolveIpv4(client: DnsClient; domain: string; timeout: int = -1): seq[string]	
asyncResolveIpv4	ndns.html#asyncResolveIpv4,DnsClient,string,int	ndns: asyncResolveIpv4(client: DnsClient; domain: string; timeout: int = 500): owned(\n    Future[seq[string]])	
resolveIpv6	ndns.html#resolveIpv6,DnsClient,string,int	ndns: resolveIpv6(client: DnsClient; domain: string; timeout: int = -1): seq[string]	
asyncResolveIpv6	ndns.html#asyncResolveIpv6,DnsClient,string,int	ndns: asyncResolveIpv6(client: DnsClient; domain: string; timeout: int = 500): owned(\n    Future[seq[string]])	
resolveRDns	ndns.html#resolveRDns,DnsClient,string,int	ndns: resolveRDns(client: DnsClient; ip: string; timeout: int = -1): seq[string]	
asyncResolveRDns	ndns.html#asyncResolveRDns,DnsClient,string,int	ndns: asyncResolveRDns(client: DnsClient; ip: string; timeout: int = 500): owned(\n    Future[seq[string]])	
resolveDnsBL	ndns.html#resolveDnsBL,DnsClient,string,string,int	ndns: resolveDnsBL(client: DnsClient; ip, dnsbl: string; timeout: int = -1): seq[\n    string]	
asyncResolveDnsBL	ndns.html#asyncResolveDnsBL,DnsClient,string,string,int	ndns: asyncResolveDnsBL(client: DnsClient; ip, dnsbl: string; timeout: int = 500): owned(\n    Future[seq[string]])	
Basic Use	ndns.html#basic-use	 Basic Use	
Advanced Use	ndns.html#advanced-use	 Advanced Use	
Using System DNS Server	ndns.html#using-system-dns-server	 Using System DNS Server	
